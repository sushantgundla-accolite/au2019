1] Refactor code snippet to return the following result

console.log(foo.show()); // ["hello world", "hello world"]

var foo = {
 title: 'world',
 show() {
 return ['', ''].map(function(a) { return 'hello ' + this.title });
 }
};

Ans:

var foo = {
 title: 'world',
 show() {
 return ['', ''].map(function(a) { return 'hello ' + var.title });
 }
};
console.log(foo.show());


2] What does the following code print to the console?

function foo() {
 var a = 42;
 (function() {
 a = 27;
 console.log(a);
 })();
 console.log(a);
}
foo();

Ans:

 27 
 27


3]Given the following code snippet:

let foo = 5;
function addTwo(foo) {
 foo = foo + 2;
}
addTwo(foo);
console.log(foo);

Ans:
 5


4] How can you return a new function and assign the this context to an object?
var module = {
 x: 42,
 getX: function() {
 return this.x;
 }
}

Ans:

var fn1 = module.getX;
var fun2 = fn1.bind(module);
document.write(fun2());


5] The following snippet throws an error. Why?

function foo() {
 'use strict';
 (function () {
 var point = {x: 42, y: 27};
 with (point) {
 console.log('The coordinates are: x: ', x, 'y: ', y);
 }
 })();
}
foo();

Ans:
'with' can not be used in Strict Mode because any name inside the block might assign either to a property of the object passed to it, or to a variable in surrounding scope, at runtime, which can only be determined at runtime.


6] What is wrong with this snippet?

class MegaArray extends Array{
  constructor(contents){
    this.contents = contents;
  }
}
let mArr = new MegaArray(1, 2, 3);

What is the correct syntax for accessing the argument object inside a function?

Ans:

class MegaArray extends Array{
   constructor(...contents){
    super(...contents);
   }
   display(mArr)
   {
       var l=this.length;
       for(var i=0;i<l;i++)
       {
           document.write(mArr[i]); 
           document.write("<br>"); 
       }
   }
}
let mArr = new MegaArray(1, 2, 3);
mArr.display(mArr);

7] Change the code so as to print the numbers in sequence,

for (var i = 0; i < 10; i++) {
         setTimeout(function() 
         { 
             document.write(i) 
             document.write("<br>") 
         }, 0);
}

Ans:

for(var i=0; i<10; i++)
{
    setTimeout(function(){ 
      i = 10 - i;
      console.log(i); 
      i = 10 - i - 1;
    }, 1000);
}



----------------------------------------------------------------Excersize------------------------------------------------------------------------------------------------------------------------------------------------------

# Instructions

1. Fix the code so it prints out the alphabet A-Z in the console.

2. Cannot:
	- Have **any** global variables at all
	- Delete or combine any function declarations
	- Create any new functions (except IIFEs -- hint!)
	- Rearrange the order of declarations

3. Can/must:
	- Declare extra variables (as long as they're not global)
	- Modify (in-place) function declaration/initialization
	- Add/remove statements/expressions (IIFEs, return, params, etc)
	- Make the fewest changes possible 



A();

function C() {
	console.log("OOPS!");
}

function E(f) {
	console.log("E");
	f();
	var f = F;
}

var A = function() {
	console.log("A");
	B();
};

var C;

function G() {
	console.log("G");
	H();

	var H = function() {
		console.log("H");
		I();
	};
}

var D = d;

function d() {
	console.log("D");
	E();
}

function I() {
	console.log("I");
	J();
	J();
}

B = function() {
	console.log("B");
	C();
};

var F = function() {
	console.log("F");
	G();
};

var rest = "KLMNOPQRSTUVWXYZ".split("");
for (var i=0; i<rest.length; i++) {
	(function(i){
		// define the current function
		window[rest[i]] = function() {
			console.log(rest[i]);
			if (i < (rest.length-1)) {
				// TODO: call the next function
			}
		};
	})(i);
}

var J = function() {
	J = function() {
		console.log("J");
		K();
	};
};

C = function() {
	console.log("C");
	D();
};


OUTPUT:
(function(global){ 
 function C() {
  console.log("OOPS!"); 
   }
   function E(f) { 
    console.log("E");
     f(); 
       var f = F;
      }
     var A = function() { 
     console.log("A"); 
        B(); 
          };
           var C; 
    function G() { 
      console.log("G"); 
          H(); 
       function H() { 
    console.log("H"); 
       I(); 
       } 
     }
    var D = d;
     function d() { 
        console.log("D");
           E(F); 
        } 
     function I() { 
     console.log("I");
         J();
          J();
        }
   B = function() { 
    console.log("B"); 
          C(); 
    }; 
    var F = function() { 
     console.log("F");
    G();
      };
     var rest = "KLMNOPQRSTUVWXYZ".split(""), fns = {}; 
          for (var i=0; i<rest.length; i++) { 
           (function(i){
       fns[rest[i]] = function() {
     console.log(rest[i]); 
    if (i < (rest.length-1)) { 
  fns[rest[i+1]]();
         }
          };
         })(i);
         }
      var J = function() { 
    J = function() { 
      console.log("J"); 
     fns.K(); 
         }; 
      }; 
  function C() { 
   console.log("C"); 
       D(); 
    } return A;
   })()();
